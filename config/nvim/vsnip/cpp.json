{
  "class": {
    "prefix": "class",
    "body": "class ${1:${TM_FILENAME_BASE}}\n{\nprivate:\n\t${2:/* data */}\npublic:\n\t${1}(${3:/* args */});\n\t~${1}();\n};\n\n${1}::${1}(${3})\n{\n}\n\n${1}::~${1}()\n{\n}",
    "description": "Code snippet for class",
    "scope": "source.c++, source.objc++"
  },
  "classi": {
    "prefix": "classi",
    "body": "class ${1:${TM_FILENAME_BASE}}\n{\nprivate:\n\t${2:/* data */}\npublic:\n\t${1}(${3:/* args */}) { $0}\n\t~${1}() { }\n};",
    "description": "Code snippet for class with inlined constructor/destructor",
    "scope": "source.c++, source.objc++"
  },
  "classt": {
    "prefix": "classt",
    "body": "template<typename T>\nclass ${1:${TM_FILENAME_BASE}}\n{\nprivate:\n\tT ${2:/* data */}\npublic:\n\t${1}(T ${3:/* args */});\n};",
    "description": "Code snippet for class template",
    "scope": "source.c++, source.objc++"
  },
  "struct": {
    "prefix": "struct",
    "body": "struct ${1:${TM_FILENAME_BASE}}\n{\n\t${0:/* data */}\n};",
    "description": "Code snippet for struct",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "union": {
    "prefix": "union",
    "body": "union ${1:${TM_FILENAME_BASE}}\n{\n\t${0:/* data */}\n};",
    "description": "Code snippet for union",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "ifel": {
    "prefix": "ifel",
    "body": "if (${1:/* condition */}) {\n\t${2:/* code */}\n}\nelse {\n\t${0:/* code */}\n}",
    "description": "Code snippet for if() else",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "ifelif": {
    "prefix": "ifelif",
    "body": "if (${1:/* condition */}) {\n\t${2:/* code */}\n}\nelse if(${3:/* condition */}) {\n\t${4:/* code */}\n}\nelse {\n\t${0:/* code */}\n}",
    "description": "Code snippet for if() else if() else",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "main": {
    "prefix": "main",
    "body": "main(int argc, char const *argv[])\n{\n\t${1:/* code */}\n\treturn 0;\n}",
    "description": "Code snippet for main()",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "forr": {
    "prefix": "forr",
    "body": "for(int ${1:i} = ${2:length} - 1; $1 >= 0; ${3:$1--})\n{\n\t${0:/* code */}\n}",
    "description": "Code snippet for reverse for loop",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "foreach": {
    "prefix": "foreach",
    "body": "for(${1:object} = ${2:var} in ${3:collection})\n{\n\t${0:/* code */}\n}",
    "description": "Code snippet for foreach loop",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "forrange": {
    "prefix": "forrange",
    "body": "for(auto&& ${1:i} : ${2:v})\n{\n\t$0\n}",
    "description": "Code snippet for range-based forloop",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "ifd": {
    "prefix": "ifnd",
    "body": "#if defined($1)\n\n${0}\n\n#endif // $1",
    "description": "Code snippet for if defined()",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "ifnd": {
    "prefix": "ifnd",
    "body": "#if !defined($1)\n#define ${1:MACRO}\n\n${0}\n\n#endif // $1",
    "description": "Code snippet for if !defined()",
    "scope": "source.c, source.objc, source.c++, source.objc++"
  },
  "namesp": {
    "prefix": "namesp",
    "body": "namespace ${1:name}\n{\n\t$0\n} // $1",
    "description": "Code snippet for namespace",
    "scope": "source.c++, source.objc++"
  },
  "try": {
    "prefix": "try",
    "body": "try\n{\n\t${1:/* code */}\n}\ncatch(${2:const std::exception& e})\n{\n\t${0:std::cerr << e.what() << '\\n';}\n}",
    "description": "Code snippet for try catch block",
    "scope": "source.c++, source.objc++, source.c++11"
  }
}
